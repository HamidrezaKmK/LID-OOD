data:
  dataset: lsun
  make_valid_loader: true
  train_batch_size: 128
  valid_batch_size: 128
  test_batch_size: 128

trainer:
  trainer_cls: model_zoo.trainers.single_trainer.SingleTrainer
  optimizer:
    class_path: torch.optim.AdamW
    init_args:
      lr: 0.001
  writer:
    logdir: runs
    make_subdir: True
    tag_group: flow
    type: wandb
    entity: dgm-l6
    project: training-dgms
    
  evaluator:
    valid_metrics: [loss]
    test_metrics: [loss]

  sample_freq: 1 # logs the samples after every two epochs
  max_epochs: 400
  early_stopping_metric: loss
  max_bad_valid_epochs: 30
  max_grad_norm: 1.0
  only_test: False
  progress_bar: True
    
# Settings from the new configurations
model:
  is_gae: false
  class_path: model_zoo.density_estimator.flow.NormalizingFlow
  init_args:
    # Data transform args (they are here because they might influence log_prob)
    flatten: False
    data_shape: [3, 32, 32]
    denoising_sigma: null
    dequantize: True
    scale_data: True
    whitening_transform: False
    
    # with flow_logit_transform, it also get's included in the log_prob
    logit_transform: True

    clamp_samples: False

    # Base distribution arguments (in this work the base is always Gaussian)
    base_distribution:
      class_path: nflows.distributions.StandardNormal
      init_args:
        shape: [3072]
    
    
    # The actual transformations of the flow
    transform:
    ######################################################################### 
    ###### First level
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 2 # turns the image into [12, 16, 16]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 12 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 12
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 12
            flip: True
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 12 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 12
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 12
            flip: False
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 12
      multiscale:
        transform_output_shape: [12, 16, 16]
    ###########################################################################
    ##### Second Level
    # squeeze
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 2 # turns the image into [24, 8, 8]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 24 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 24
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 24
            flip: True
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 24 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 24
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 24
            flip: False
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 24
      multiscale:
        transform_output_shape: [24, 8, 8]
    ###########################################################################
    ##### Third Level
    # squeeze
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 8 # turns the image into [768, 1, 1]
    - repeat_n: 2
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 768 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 1024
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 768
            flip: True
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 768 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
        init_args: 
          coupling_transform_cls: nflows.transforms.AffineCouplingTransform
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 1024
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 768
            flip: false
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 768
      multiscale:
        transform_output_shape: [768, 1, 1]
    